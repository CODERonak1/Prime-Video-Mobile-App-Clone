import { StyleSheet, Text, View, FlatList, SectionList, Image, Pressable, Animated } from 'react-native';
import React, { useState, useEffect, useRef } from 'react';
import ContentData from '../Data/ContentData';
import { useNavigation } from '@react-navigation/native';

// Defining the types
interface ContentItem {
  name: string;
  id: string;
  img: string;
  videoUrl: string;
}

interface ContentType {
  title: string;
  data: ContentItem[];
}

// the complete code of Skeleton Loader is generated by the chatgpt
const SkeletonLoader = () => {
  const shimmerAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(shimmerAnim, {
          toValue: 1,
          duration: 1000,
          useNativeDriver: true,
        }),
        Animated.timing(shimmerAnim, {
          toValue: 0,
          duration: 1000,
          useNativeDriver: true,
        }),
      ])
    ).start();
  }, []);

  const shimmerInterpolation = shimmerAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0.7)'],
  });

  return (
    <View style={styles.skeletonContainer}>
      <Animated.View
        style={[
          styles.skeletonImageContainer,
          { backgroundColor: shimmerInterpolation },
        ]}
      />
    </View>
  );
};

// Rendering the image with pressable
const renderImageItem = ({ item, navigation }: { item: ContentItem; navigation: any }) => {
  return (
    <View>
      {/* Pressable for making the image clickable */}
      <Pressable
        android_ripple={{ color: '#ffffff60', foreground: true }}
        style={styles.itemBtn}
        onPress={() => navigation.navigate('VideoPage', { videoUrl: item.videoUrl, name: item.name })}
      >
        {/* Content images */}
        <Image source={{ uri: item.img }} style={styles.images} />
      </Pressable>
    </View>
  );
};

// Rendering the section content with skeleton loader logic
const renderSectionContent = ({
  section,
  navigation,
  loading,
}: {
  section: ContentType;
  navigation: any;
  loading: boolean;
}) => {
  return (
    <FlatList
      data={loading ? Array(5).fill('') : section.data} // Show skeleton loader if loading
      renderItem={({ item }) =>
        loading ? <SkeletonLoader /> : renderImageItem({ item, navigation })
      }
      horizontal
      keyExtractor={(item, index) => index.toString()} // Use index for skeleton loader
      showsHorizontalScrollIndicator={false}
      contentContainerStyle={styles.horizontalListContainer}
    />
  );
};

// Main section content
const Content = () => {
  const navigation = useNavigation();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate loading for 2 seconds
    const timer = setTimeout(() => {
      setLoading(false);
    }, 2000); // Replace with actual data fetching logic

    return () => clearTimeout(timer);
  }, []);

  return (
    <View style={styles.contentContainer}>
      <SectionList
        sections={ContentData}
        renderSectionHeader={({ section }) => (
          <Text style={styles.title}>{section.title}</Text>
        )}
        renderItem={() => null}
        renderSectionFooter={({ section }) =>
          renderSectionContent({ section, navigation, loading })
        }
        keyExtractor={(item) => item.id}
      />
    </View>
  );
};

export default Content;

const styles = StyleSheet.create({
  contentContainer: {
    marginTop: 30,
  },

  itemBtn: {
    marginHorizontal: 10,
    marginRight: 5,
    overflow: 'hidden',
    borderRadius: 4,
  },

  images: {
    height: 200,
    width: 140,
    resizeMode: 'cover',
    borderRadius: 4,
  },

  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
    marginVertical: 10,
    marginLeft: 20,
  },

  horizontalListContainer: {
    paddingBottom: 18,
  },

  // these skeleton loader styles are generated by ai
  skeletonContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 10,
  },

  skeletonImageContainer: {
    height: 200,
    width: 140,
    borderRadius: 4,
    backgroundColor: '#e0e0e0',
  },
});
